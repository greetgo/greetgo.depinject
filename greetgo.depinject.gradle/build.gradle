apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'

task createClasspathManifest {
  group 'build'
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    file("$outputDir/test-classpath.txt").text = sourceSets.test.runtimeClasspath.join("\n")
  }
}

task cleanAndCreateClasspathManifest {
  group 'build'
  dependsOn clean
  dependsOn createClasspathManifest
}

createClasspathManifest.shouldRunAfter clean

dependencies {
  testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
    exclude module: 'groovy-all'
  }

  testCompile project(":greetgo.depinject.gen")
  testCompile project(":modules")

  testRuntime files(createClasspathManifest)
}

gradlePlugin {
  plugins {
    depinjectPlugin {
      id = 'kz.greetgo.depinject.plugin'
      implementationClass = 'kz.greetgo.depinject.gradle.DepinjectPlugin'
    }
  }
}

sourceSets.main.groovy.srcDirs = ["src_groovy"]
sourceSets.test.groovy.srcDirs = ["test_src_groovy"]

sourceSets.main.resources {
  srcDirs += sourceSets.main.groovy.srcDirs
  exclude '**/*.groovy'
}
sourceSets.test.resources {
  srcDirs += sourceSets.test.groovy.srcDirs
  exclude '**/*.groovy'
}
sourceSets.test.java.srcDirs += "sources_for_tests/test1"

test {
  //options.suites( "src/test/resources/testsIndependent.xml" )
  // options.suites( "src/test/resources/testsPostgresDB.xml" )
}

task testSimpleProbe(type: Test) {
  group 'verification'
  useTestNG()
  options.suites("test_runs/simple_probe.xml")
}