def nowDate = new Date()
def nowFormattedDate = nowDate.format("yyyy-MM-dd/HH:mm:ss")

eclipse {
  jdt {
    //
    // if you want to alter the java versions (by default they are configured with
    // gradle java plugin settings):
    //
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
  }

  project {
    natures 'com.google.gwt.eclipse.core.gwtNature'
    buildCommand 'com.google.gdt.eclipse.core.webAppProjectValidator'
    buildCommand 'com.google.gwt.eclipse.core.gwtProjectValidator'
  }
  classpath {
    containers 'com.google.gwt.eclipse.core.GWT_CONTAINER'
  }
}

configurations { repoUpload }

dependencies {
  compile project(':greetgo.depinject')
  compile project(':greetgo.depinject.gen')

  compile "com.google.gwt:gwt-user:${gwtVersion}"
  compile "com.google.gwt:gwt-dev:${gwtVersion}"
  compile 'com.metapossum:metapossum-scanner:1.0.1'

}

test { useTestNG() }

task packageSources(type: Jar) {
  from sourceSets.main.allJava
  classifier = 'sources'
}

jar {
  from sourceSets.main.allSource
}

uploadArchives {
  repositories.mavenDeployer {
    configuration = configurations.archives
    repository(
      url: System.getenv('GG_REPO')
    )

    pom.project {
      name project.name
      packaging 'jar'
    }
  }
}

if (System.getenv('LIB_SIGN_GPG_KEY_ID') != null && System.getenv('LIB_SIGN_GPG_KEY_ID').length() > 0) {

  gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
      allprojects { ext."signing.keyId" = System.getenv('LIB_SIGN_GPG_KEY_ID') }
      allprojects { ext."signing.secretKeyRingFile" = System.getenv('LIB_SIGN_GPG_KEY_LOCATION') }
      allprojects { ext."signing.password" = System.getenv('LIB_SIGN_GPG_KEY_PASSWORD') }
    }
  }
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
  options.addStringOption("sourcepath", "/home/yakzhanov/11")
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
  from javadoc.destinationDir
  classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

project.tasks.create('uploadToMavenCentral', Upload.class) {
  configuration = configurations.archives
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(
            userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
            password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
        )
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(
            userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
            password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
        )
      }

      pom.project {
        name project.name
        packaging 'jar'

        description 'DepInject. Dependency injection tool'
        url 'http://tech.greetgo.kz/libs/greetgo/depinject.php'

        scm {
          connection 'scm:git:https://github.com/greetgo/depinject'
          developerConnection 'scm:git:https://github.com/greetgo/depinject'
          url 'https://github.com/greetgo/depinject'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'greetgo'
            name 'Yevgeniy Kolpakov'
            email 'tech@greet-go.com'
          }
        }
      }
    }
  }
}
