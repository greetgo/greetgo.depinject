def nowDate = new Date()
def nowFormattedDate = nowDate.format("yyyy-MM-dd/HH:mm:ss")
def vendorName = "greetgo!"

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'maven'
  apply plugin: 'signing'

  version = '2.0.0'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  group = "kz.greetgo.depinject"

  eclipse.project.natures 'org.springsource.ide.eclipse.gradle.core.nature'
  compileJava.options.debugOptions.debugLevel = "source,lines,vars"
  compileTestJava.options.debugOptions.debugLevel = "source,lines,vars"
}

subprojects {
  repositories {
//    mavenLocal()
//    if (System.getenv('GG_REPO') != null && System.getenv('GG_REPO').length() > 0) {
//      maven { url System.getenv('GG_REPO') }
//    }
    mavenCentral()
  }

  dependencies {
    //ext.jettyVersion = '8.0+'
    ext.jettyVersion = '9.2+'
    ext.springVersion = '4.2.3.RELEASE'
    ext.gwtVersion = '2.8.0'
    ext.greetgoUtilVersion = '0.0.27'
    ext.testNgVersion = '6.5.1'
    ext.classScannerVersion = '2.0.0'
    ext.greetgoJavaCompilerVersion = "2.0.0"

    //compile 'com.google.code.findbugs:annotations:2.0.1'

    testCompile "org.testng:testng:${testNgVersion}"
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
  }

  compileJava {
    options.encoding = "UTF-8"
  }
  compileTestJava {
    options.encoding = "UTF-8"
  }

  project.eclipse.classpath.file.whenMerged { cp ->
    if (project.hasProperty("sourceCompatibility")) {
      cp.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {

        it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/" +
            "JavaSE-$project.sourceCompatibility"
      }
    }
  }

  jar {
    manifest {
      attributes 'Implementation-Title': project.name,
          'Implementation-Version': version, 'Implementation-Vendor': vendorName,
          'Built-By': System.getProperty("user.name"), 'Built-At': nowFormattedDate
    }
  }

  test { useTestNG() }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  artifacts {
    archives javadocJar, sourcesJar
  }


  if (System.getenv('LIB_SIGN_GPG_KEY_ID') != null && System.getenv('LIB_SIGN_GPG_KEY_ID').length() > 0) {

    gradle.taskGraph.whenReady { taskGraph ->
      if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('LIB_SIGN_GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('LIB_SIGN_GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('LIB_SIGN_GPG_KEY_PASSWORD') }
      }
    }
  }

  signing {
    sign configurations.archives
  }

  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
  }


  project.tasks.create('uploadToMavenCentral', Upload.class) {
    configuration = configurations.archives
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(
              userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
              password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
          )
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(
              userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
              password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
          )
        }

        pom.project {
          name project.name
          packaging 'jar'

          description 'Hot configs. To manage apllication configuration'
          url 'http://tech.greetgo.kz/libs/greetgo/email.php'

          scm {
            connection 'scm:git:https://github.com/greetgo/email'
            developerConnection 'scm:git:https://github.com/greetgo/email'
            url 'https://github.com/greetgo/email'
          }

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id 'greetgo'
              name 'Yevgeniy Kolpakov'
              email 'tech@greet-go.com'
            }
          }
        }
      }
    }
  }





}
